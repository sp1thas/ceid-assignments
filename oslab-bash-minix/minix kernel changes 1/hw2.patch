diff --git a/bin/mkdir/mkdir.c b/bin/mkdir/mkdir.c
index 78d4c3b..5ad5f0f 100644
--- a/bin/mkdir/mkdir.c
+++ b/bin/mkdir/mkdir.c
@@ -121,7 +121,7 @@ main(int argc, char *argv[])
 			if (mkpath(*argv, mode, dir_mode) < 0)
 				exitval = EXIT_FAILURE;
 		} else {
-			if (mkdir(*argv, mode) < 0) {
+			if (exmkdir(*argv, mode) < 0) {
 				warn("%s", *argv);
 				exitval = EXIT_FAILURE;
 			} else {
@@ -166,7 +166,7 @@ mkpath(char *path, mode_t mode, mode_t dir_mode)
 		done = (*slash == '\0');
 		*slash = '\0';
 
-		rv = mkdir(path, done ? mode : dir_mode);
+		rv = exmkdir(path, done ? mode : dir_mode);
 		if (rv < 0) {
 			/*
 			 * Can't create; path exists or no perms.
diff --git a/commands/Makefile b/commands/Makefile
index fcf57f9..3db6d5d 100644
--- a/commands/Makefile
+++ b/commands/Makefile
@@ -8,7 +8,7 @@ SUBDIR=	add_route arp ash at backup banner basename btrace cal \
 	comm compress cp crc cron crontab cut \
 	dd decomp16 DESCRIBE devmand devsize df dhcpd \
 	dhrystone diff dirname diskctl dumpcore \
-	eject env erotima4 expand factor fbdctl \
+	eject env erotima4 erotima5 expand factor fbdctl \
 	find finger fingerd fix fold format fortune fsck.mfs \
 	ftp101 gcore gcov-pull getty grep head hexdump host \
 	hostaddr id ifconfig ifdef \
diff --git a/commands/erotima4/Makefile b/commands/erotima4/Makefile
index e69de29..bb9f680 100644
--- a/commands/erotima4/Makefile
+++ b/commands/erotima4/Makefile
@@ -0,0 +1,4 @@
+PROG=	erotima4
+MAN=
+
+.include <bsd.prog.mk>
\ No newline at end of file
diff --git a/commands/erotima4/erotima4.c b/commands/erotima4/erotima4.c
index e69de29..f519516 100644
--- a/commands/erotima4/erotima4.c
+++ b/commands/erotima4/erotima4.c
@@ -0,0 +1,45 @@
+
+#include <sys/cdefs.h>
+#ifndef lint
+#endif
+#ifndef lint
+#if 0
+static char sccsid[] = "@(#)erotima4.c;
+#else
+__RCSID("");
+#endif
+#endif /* not lint */
+#include <sys/param.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <err.h>
+#include <errno.h>
+#include <locale.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+void	usage(void);
+int	main(int, char *[]);
+
+int main(int argc, char *argv[])
+{
+	if (argc==1)
+    {
+        erotima4();  //Kaleitai i voithitiki sinartisi
+    }
+    else
+        usage();
+
+    return 0;
+}
+
+void usage(void)
+{
+
+	(void)fprintf(stderr, "usage: %s [NoArgument] \n",
+	    getprogname());
+	exit(0);
+
+}
diff --git a/commands/erotima5/Makefile b/commands/erotima5/Makefile
index e69de29..74faaab 100644
--- a/commands/erotima5/Makefile
+++ b/commands/erotima5/Makefile
@@ -0,0 +1,4 @@
+PROG=	erotima5
+MAN=
+
+.include <bsd.prog.mk>
\ No newline at end of file
diff --git a/commands/erotima5/erotima5.c b/commands/erotima5/erotima5.c
index e69de29..647d4e6 100644
--- a/commands/erotima5/erotima5.c
+++ b/commands/erotima5/erotima5.c
@@ -0,0 +1,48 @@
+#include <sys/cdefs.h>
+#ifndef lint
+#endif /* not lint */
+
+#ifndef lint
+#if 0
+static char sccsid[] = "@(#)erotima5.c";
+#else
+__RCSID("");
+#endif
+#endif /* not lint */
+#include <sys/param.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <err.h>
+#include <errno.h>
+#include <locale.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+void	usage(void);
+int	main(int, char *[]);
+
+int main(int argc, char *argv[])
+{
+	if (argc==2)
+    {
+        int id = atoi (argv[1]);    //Pernoume to orisma pou edwse o xristis
+        pifp (id);      //Kaloume tin sinartisi erotima5()
+    }
+    else
+    {
+        usage();
+    }
+
+    return 0;
+}
+
+void usage(void)
+{
+
+	(void)fprintf(stderr, "usage: %s [pid] \n",
+                  getprogname());
+	exit (0);
+
+}
diff --git a/include/minix/callnr.h b/include/minix/callnr.h
index 6f145cf..68a6c96 100644
--- a/include/minix/callnr.h
+++ b/include/minix/callnr.h
@@ -55,6 +55,7 @@
 #define IOCTL		  54
 #define FCNTL		  55
 #define FS_READY	  57
+#define EROTIMA5	  58
 #define EXEC		  59
 #define UMASK		  60 
 #define CHROOT		  61 
@@ -65,6 +66,8 @@
 #define SETGROUPS_O	  66
 #define GETMCONTEXT       67
 #define SETMCONTEXT       68
+#define EXMKDIR		69
+#define EROTIMA4	70
 
 /* Posix signal handling. */
 #define SIGACTION	  71
diff --git a/include/minix/sys_config.h b/include/minix/sys_config.h
index 533046c..2a66d89 100644
--- a/include/minix/sys_config.h
+++ b/include/minix/sys_config.h
@@ -25,3 +25,8 @@
 #define DEFAULT_STACK_LIMIT (4 * 1024 * 1024)
 
 #endif /* _MINIX_SYS_CONFIG_H */
+
+/* Added by release script  */
+#ifndef _VCS_REVISION
+#define _VCS_REVISION "972156d"
+#endif
diff --git a/lib/libc/sys-minix/Makefile.inc b/lib/libc/sys-minix/Makefile.inc
index 6f52097..049e8d5 100644
--- a/lib/libc/sys-minix/Makefile.inc
+++ b/lib/libc/sys-minix/Makefile.inc
@@ -2,7 +2,7 @@
 
 SRCS+= 	accept.c access.c bind.c brk.c sbrk.c m_closefrom.c getsid.c \
 	chdir.c chmod.c fchmod.c chown.c fchown.c chroot.c close.c \
-	connect.c dup.c dup2.c execve.c fcntl.c flock.c fpathconf.c fork.c \
+	connect.c dup.c dup2.c erotima4.c erotima5.c execve.c exmkdir.c fcntl.c flock.c fpathconf.c fork.c \
 	fstatfs.c fstatvfs.c fsync.c ftruncate.c getdents.c getegid.c getgid.c \
 	getgroups.c getitimer.c setitimer.c __getlogin.c getpeername.c \
 	getpgrp.c getpid.c getppid.c priority.c getrlimit.c getsockname.c \
diff --git a/lib/libc/sys-minix/erotima4.c b/lib/libc/sys-minix/erotima4.c
index e69de29..e809af6 100644
--- a/lib/libc/sys-minix/erotima4.c
+++ b/lib/libc/sys-minix/erotima4.c
@@ -0,0 +1,14 @@
+#include <sys/cdefs.h>
+#include "namespace.h"
+#include <lib.h>
+
+#include <sys/stat.h>
+#include <string.h>
+
+
+int erotima4()
+{
+  message m;
+
+  return(_syscall(PM_PROC_NR, EROTIMA4, &m));
+}
diff --git a/lib/libc/sys-minix/erotima5.c b/lib/libc/sys-minix/erotima5.c
index e69de29..0a285a5 100644
--- a/lib/libc/sys-minix/erotima5.c
+++ b/lib/libc/sys-minix/erotima5.c
@@ -0,0 +1,17 @@
+#include <sys/cdefs.h>
+#include "namespace.h"
+#include <lib.h>
+
+#include <sys/stat.h>
+#include <string.h>
+
+
+int erotima5(p_id)
+int p_id;
+{
+  message m;
+
+    m.m1_i1 = p_id;
+
+  return(_syscall(PM_PROC_NR, EROTIMA5, &m));
+}
diff --git a/lib/libc/sys-minix/exmkdir.c b/lib/libc/sys-minix/exmkdir.c
index e69de29..778c25b 100644
--- a/lib/libc/sys-minix/exmkdir.c
+++ b/lib/libc/sys-minix/exmkdir.c
@@ -0,0 +1,20 @@
+#include <sys/cdefs.h>
+#include "namespace.h"
+#include <lib.h>
+
+#include <sys/stat.h>
+#include <string.h>
+
+#ifdef __weak_alias
+__weak_alias(mkdir, _mkdir)
+#endif
+
+int mkdir(const char *name, mode_t mode)
+{
+  message m;
+
+  m.m1_i1 = strlen(name) + 1;
+  m.m1_i2 = mode;
+  m.m1_p1 = (char *) __UNCONST(name);
+  return(_syscall(VFS_PROC_NR, EXMKDIR, &m));
+}
diff --git a/lib/libsys/sys_fork.c b/lib/libsys/sys_fork.c
index 811e230..91d7561 100644
--- a/lib/libsys/sys_fork.c
+++ b/lib/libsys/sys_fork.c
@@ -18,5 +18,6 @@ vir_bytes *msgaddr;
   r = _kernel_call(SYS_FORK, &m);
   *child_endpoint = m.PR_ENDPT;
   *msgaddr = (vir_bytes) m.PR_FORK_MSGADDR;
+  printf("Process scheduled!\n");
   return r;
 }
diff --git a/servers/pm/misc.c b/servers/pm/misc.c
index dbe979f..520d90d 100644
--- a/servers/pm/misc.c
+++ b/servers/pm/misc.c
@@ -495,3 +495,68 @@ char *brk_addr;
 	_brksize = brk_addr;
 	return 0;
 }
+
+/*===========================================================================*
+ *                                   do_erotima4                             *
+ *===========================================================================*/
+int do_erotima4()
+{
+
+    int i, sum_in_seconds, counter=0;
+    clock_t clock_usr=0;        //user time
+    clock_t clock_sys=0;        //sys time
+    clock_t sum;                //sinolikos xronos
+
+    /*pername ola ta slots tou pinaka twn diergasiwn */
+    for (i=0; i<NR_PROCS; i++)
+    {
+        /* Theloume na metrisoume mono tis energes diergasies.
+         Oi energes diergasies tha xaraktirizonte apo ta flags IN_USE, WAITING kai PAUSED
+         */
+        if (mproc[i].mp_flags % 11)
+        {
+            counter++;      //Afksisi twn arithmwn twn diergasiwn pou einai energes
+            clock_usr+=mproc[i].mp_child_utime;
+            clock_sys+=mproc[i].mp_child_stime;
+        }
+    }
+
+    printf("Number of active processes: %d\n",counter);
+
+    sum=clock_usr + clock_sys;
+    sum_in_seconds = (int)sum / (int)CLOCKS_PER_SEC;
+
+    printf("(usr+sys) time of active processes %d second(s).\n", sum_in_seconds);
+
+    return 0;
+}
+
+/*===========================================================================*
+ *                                   do_erotima5                             *
+ *===========================================================================*/
+int do_erotima5 ()
+{
+    int i, flag=0;
+    int var = m_in.m1_i1;   //Diavazoume to tin metavliti tou minimatos pou periexei to id
+
+    /*pername ola ta slots tou pinaka twn diergasiwn */
+    for (i=0; i<NR_PROCS; i++)
+    {
+        if  (mproc[i].mp_pid == var)
+        {
+            flag=1;     //An den vrethei process me afto to id, tote den iparxei afto to process
+
+
+
+                if (mproc[i].mp_flags % 11)
+                    printf("Process is active.\n");
+                else
+                    printf("Process is inactive.\n");
+        }
+    }
+
+    if (flag==0)    //Tipwnetai minima an den iparxei to process
+        printf("erotima5: %d: no such process\n", var);
+
+    return 0;
+}
diff --git a/servers/pm/proto.h b/servers/pm/proto.h
index 00646d3..9cdf1f8 100644
--- a/servers/pm/proto.h
+++ b/servers/pm/proto.h
@@ -56,6 +56,8 @@ int do_getepinfo(void);
 int do_getepinfo_o(void);
 int do_svrctl(void);
 int do_getsetpriority(void);
+int do_erotima4(void);
+int do_erotima5(void);
 
 /* schedule.c */
 void sched_init(void);
diff --git a/servers/pm/table.c b/servers/pm/table.c
index 5051cec..6809c86 100644
--- a/servers/pm/table.c
+++ b/servers/pm/table.c
@@ -69,7 +69,7 @@ int (*call_vec[])(void) = {
 	no_sys,		/* 55 = fcntl	*/
 	no_sys,		/* 56 = unused	*/
 	no_sys,		/* 57 = unused	*/
-	no_sys,		/* 58 = unused	*/
+	do_erotima5,/* 58 = erotima5	*/
 	do_exec,	/* 59 = execve	*/
 	no_sys,		/* 60 = umask	*/
 	no_sys,		/* 61 = chroot	*/
@@ -81,7 +81,7 @@ int (*call_vec[])(void) = {
 	do_getmcontext,	/* 67 = getmcontext */
 	do_setmcontext,	/* 68 = setmcontext */
 	no_sys,		/* 69 = unused	*/
-	no_sys,		/* 70 = unused	*/
+	do_erotima4,		/* 70 = erotima4	*/
 	do_sigaction,	/* 71 = sigaction   */
 	do_sigsuspend,	/* 72 = sigsuspend  */
 	do_sigpending,	/* 73 = sigpending  */
diff --git a/servers/vfs/open.c b/servers/vfs/open.c
index fc72695..e61d1b3 100644
--- a/servers/vfs/open.c
+++ b/servers/vfs/open.c
@@ -608,7 +608,7 @@ int do_mkdir()
 	r = req_mkdir(vp->v_fs_e, vp->v_inode_nr, fullpath, fp->fp_effuid,
 		      fp->fp_effgid, bits);
   }
-
+printf("New Dir -> %s, %o\n",fullpath,dirmode);
   unlock_vnode(vp);
   unlock_vmnt(vmp);
   put_vnode(vp);
@@ -616,6 +616,47 @@ int do_mkdir()
 }
 
+/*===========================================================================*
+ *				do_exmkdir				     *
+ *===========================================================================*/
+int do_exmkdir()
+{
+/* Perform the mkdir(name, mode) system call. */
+  mode_t bits;			/* mode bits for the new inode */
+  int r;
+  struct vnode *vp;
+  struct vmnt *vmp;
+  char fullpath[PATH_MAX];
+  struct lookup resolve;
+  vir_bytes vname1;
+  size_t vname1_length;
+  mode_t dirmode;
+
+  vname1 = (vir_bytes) job_m_in.name1;
+  vname1_length = (size_t) job_m_in.name1_length;
+  dirmode = (mode_t) job_m_in.mode;
+
+  lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vmp, &vp);
+  resolve.l_vmnt_lock = VMNT_WRITE;
+  resolve.l_vnode_lock = VNODE_WRITE;
+
+  if (fetch_name(vname1, vname1_length, fullpath) != OK) return(err_code);
+  bits = I_DIRECTORY | (dirmode & RWX_MODES & fp->fp_umask);
+  if ((vp = last_dir(&resolve, fp)) == NULL) return(err_code);
+
+  /* Make sure that the object is a directory */
+  if (!S_ISDIR(vp->v_mode)) {
+	r = ENOTDIR;
+  } else if ((r = forbidden(fp, vp, W_BIT|X_BIT)) == OK) {
+	r = req_mkdir(vp->v_fs_e, vp->v_inode_nr, fullpath, fp->fp_effuid,
+		      fp->fp_effgid, bits);
+  }
+printf("New Dir -> %s, %o\n",fullpath,dirmode);
+  unlock_vnode(vp);
+  unlock_vmnt(vmp);
+  put_vnode(vp);
+  return(r);
+}
+/*===========================================================================*
  *				do_lseek				     *
  *===========================================================================*/
 int do_lseek()
diff --git a/servers/vfs/proto.h b/servers/vfs/proto.h
index b98d742..2db1e0e 100644
--- a/servers/vfs/proto.h
+++ b/servers/vfs/proto.h
@@ -166,6 +166,7 @@ int do_lseek(void);
 int do_llseek(void);
 int do_mknod(void);
 int do_mkdir(void);
+int do_exmkdir(void);
 int do_open(void);
 int do_slink(void);
 int do_vm_open(void);
diff --git a/servers/vfs/table.c b/servers/vfs/table.c
index 8371e34..b434a37 100644
--- a/servers/vfs/table.c
+++ b/servers/vfs/table.c
@@ -84,7 +84,7 @@ int (*call_vec[])(void) = {
 	do_fstat, 	/* 66 = fstat - badly numbered, being phased out */
 	do_lstat,	/* 67 = lstat - badly numbered, being phased out */
 	no_sys,		/* 68 = unused	*/
-	no_sys,		/* 69 = unused  */
+	do_exmkdir,		/* 69 = exmkdir  */
 	no_sys,		/* 70 = unused  */
 	no_sys,		/* 71 = (sigaction) */
 	no_sys,		/* 72 = (sigsuspend) */
diff --git a/sys/sys/stat.h b/sys/sys/stat.h
index 06a5a34..5c0185c 100644
--- a/sys/sys/stat.h
+++ b/sys/sys/stat.h
@@ -226,7 +226,9 @@ struct minix_prev_stat {
 __BEGIN_DECLS
 int	chmod(const char *, mode_t);
 int	mkdir(const char *, mode_t);
+int exmkdir(const char *, mode_t);
 int	mkfifo(const char *, mode_t);
+int erotima5(int);
 #ifndef __LIBC12_SOURCE__
 int	stat(const char *, struct stat *) __RENAME(__stat50);
 int	fstat(int, struct stat *) __RENAME(__fstat50);
